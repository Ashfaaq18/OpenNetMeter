<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:res="clr-namespace:OpenNetMeter.Properties">

    <Style TargetType="Line" x:Key="LineColor">
        <Setter Property="Stroke" Value="Black"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Stroke" Value="White"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FontColor1">
        <Setter Property="Control.Foreground" Value="Black"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Control.Foreground" Value="White"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FontColor2">
        <Setter Property="Control.Foreground" Value="Gray"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Control.Foreground" Value="LightGray"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="FontColor3">
        <Setter Property="Control.Foreground" Value="#4F5050"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Control.Foreground" Value="#a9abab"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FontColor4">
        <Setter Property="Control.Foreground" Value="#4287f5"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Control.Foreground" Value="#97b9f0"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Grid" x:Key="BackgroundColor1">
        <Setter Property="Background" Value="White"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#151515"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Grid" x:Key="BackgroundColor2">
        <Setter Property="Background" Value="#f1f1f1"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#252525"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="Grid" x:Key="MiniWidgetBackgroundColor">
        <Setter Property="Background" Value="#f1f1f1"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#252525"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = MiniWidgetTransparent}" Value="True">
                <Setter Property="Background" Value="Transparent"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Border" x:Key="BorderColor">
        <Setter Property="Control.BorderBrush" Value="#4F5050"></Setter>
        <Setter Property="Control.BorderThickness" Value="1"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Control.BorderBrush" Value="#616161"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="Button" x:Key="ButtonColor">
        <Setter Property="Background" Value="White"></Setter>
        <!-- set button highlight template color -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" >
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#151515"></Setter>
            </DataTrigger>
            <!-- set button highlight light mode color -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ffcab5 "/>
            </Trigger>

            <!-- set button highlight dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#c97c5d"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="MainWindowSummaryTab">

        <!-- set unselected button light mode color -->
        <Setter Property="Background" Value="#f1f1f1"/>
        <Setter Property="BorderBrush" Value="#f1f1f1"/>

        <!-- set button highlight template color -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  BorderThickness="0,0,0,5" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>

            <!-- set unselected button dark mode color -->
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#202020"/>
                <Setter Property="BorderBrush" Value="#202020"/>
            </DataTrigger>

            <!-- set button highlight light mode color -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ffcab5 "/>
                <Setter Property="BorderBrush" Value="#ffcab5"/>
            </Trigger>

            <!-- set button highlight dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#c97c5d"/>
                <Setter Property="BorderBrush" Value="#c97c5d"/>
            </MultiDataTrigger>

            <!-- set selected button border light mode color -->
            <DataTrigger Binding="{Binding TabBtnToggle}" Value="0">
                <Setter Property="BorderBrush" Value="Black"/>
            </DataTrigger>

            <!-- set selected button border dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding TabBtnToggle}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#f1f1f1"/>
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>
    
    <Style TargetType="Button" x:Key="MainWindowDetailedTab">

        <!-- set unselected button light mode color -->
        <Setter Property="Background" Value="#f1f1f1"/>
        <Setter Property="BorderBrush" Value="#f1f1f1"/>

        <!-- set button highlight template color -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  BorderThickness="0,0,0,5" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <!-- set unselected button dark mode color -->
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#202020"/>
                <Setter Property="BorderBrush" Value="#202020"/>
            </DataTrigger>

            <!-- set button highlight light mode color -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ffcab5 "/>
                <Setter Property="BorderBrush" Value="#ffcab5"/>
            </Trigger>

            <!-- set button highlight dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#c97c5d"/>
                <Setter Property="BorderBrush" Value="#c97c5d"/>
            </MultiDataTrigger>

            <!-- set selected button border light mode color -->
            <DataTrigger Binding="{Binding TabBtnToggle}" Value="1">
                <Setter Property="BorderBrush" Value="Black"/>
            </DataTrigger>

            <!-- set selected button border dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding TabBtnToggle}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#f1f1f1"/>
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>
    
    <Style TargetType="Button" x:Key="MainWindowSettingsTab">
        
        <!-- set unselected button light mode color -->
        <Setter Property="Background" Value="#f1f1f1"/>
        <Setter Property="BorderBrush" Value="#f1f1f1"/>
        
        <!-- set button highlight template color -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  BorderThickness="0,0,0,5" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <!-- set unselected button dark mode color -->
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#202020"/>
                <Setter Property="BorderBrush" Value="#202020"/>
            </DataTrigger>

            <!-- set button highlight light mode color -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ffcab5 "/>
                <Setter Property="BorderBrush" Value="#ffcab5"/>
            </Trigger>

            <!-- set button highlight dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#c97c5d"/>
                <Setter Property="BorderBrush" Value="#c97c5d"/>
            </MultiDataTrigger>

            <!-- set selected button border light mode color -->
            <DataTrigger Binding="{Binding TabBtnToggle}" Value="2">
                <Setter Property="BorderBrush" Value="Black"/>
            </DataTrigger>

            <!-- set selected button border dark mode color -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                    <Condition Binding="{Binding TabBtnToggle}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#f1f1f1"/>
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>
    
    <!-- Summary page styles -->
    
    <Style TargetType="Border" x:Key="BorderStyle1">
        <Setter Property="Background" Value="White"/>
        <Setter Property="CornerRadius" Value="10"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="20" Color="#dddddd" Opacity="0.4" Direction="280" ShadowDepth="0" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#303030"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="20" Color="#0d0d0d" Opacity="0.4" Direction="280" ShadowDepth="0" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ItemsControl" x:Key="GraphLabels">
        <Setter Property="TextBlock.Foreground" Value="Black"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="TextBlock.Foreground" Value="White"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Line" x:Key="GraphXYLines">
        <Setter Property="Stroke" Value="LightGray"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Stroke" Value="DarkGray"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Line" x:Key="GraphBorder">
        <Setter Property="Stroke" Value="Black"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Stroke" Value="LightGray"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Grid x:Key="Download_Icon"  x:Shared="False">
        <Line
                                X1="0" Y1="0"
                                X2="0" Y2="20"
                                Stroke="LightSeaGreen"
                                StrokeThickness="2" Margin="0,0,10,0" VerticalAlignment="Center" />
        <Line
                                X1="0" Y1="20"
                                X2="6" Y2="10"
                                Stroke="LightSeaGreen"
                                StrokeThickness="2" Margin="0,0,0,0" VerticalAlignment="Center" />
        <Line
                                X1="0" Y1="20"
                                X2="-6" Y2="10"
                                Stroke="LightSeaGreen"
                                StrokeThickness="2" Margin="0,0,0,0" VerticalAlignment="Center" />
    </Grid>
    <Grid x:Key="Upload_Icon"  x:Shared="False">
        <Line
                                X1="0" Y1="0"
                                X2="0" Y2="20"
                                Stroke="LightSalmon"
                                StrokeThickness="2" Margin="0,0,10,0" VerticalAlignment="Center" />
        <Line
                                X1="0" Y1="-8"
                                X2="6" Y2="5"
                                Stroke="LightSalmon"
                                StrokeThickness="2" Margin="0,0,0,0" VerticalAlignment="Center" />
        <Line
                                X1="0" Y1="-8"
                                X2="-6" Y2="5"
                                Stroke="LightSalmon"
                                StrokeThickness="2" Margin="0,0,0,0" VerticalAlignment="Center" />
    </Grid>

    <!-- Detailed view page -->

    <Style TargetType="{x:Type DataGrid}" x:Key="DGHeaderStyle">
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource DGCHeaderStyle}"/>
        <Setter Property="RowStyle" Value="{DynamicResource DGRowStyle}"/>
        <Setter Property="VerticalGridLinesBrush" Value="#999999"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#999999"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="RowHeaderWidth" Value="1"/>
        <Setter Property="BorderBrush" Value="#999999"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#333333" />
                <Setter Property="BorderBrush" Value="#666666"/>
                <Setter Property="VerticalGridLinesBrush" Value="#666666"/>
                <Setter Property="HorizontalGridLinesBrush" Value="#666666"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DGCHeaderStyle" TargetType="DataGridColumnHeader">

        <Setter Property="Height" Value="30"/>
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5,2,5,2"/>
        <Setter Property="Background" Value="#c0e3da" />
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="#999999"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Background" Value="#367061" />
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderBrush" Value="#999999"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>
    <Style x:Key="DGRowStyle" TargetType="DataGridRow">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Foreground" Value="Black"/>

        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="#EEEEEE" />
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="#CCCCCC" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=AlternationIndex}" Value="0"/>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#333333" />
                <Setter Property="Foreground" Value="White"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=AlternationIndex}" Value="1"/>
                    <Condition Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="#555555" />
                <Setter Property="Foreground" Value="White"/>
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="DGCellStyle1" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Left" />
    </Style>
    <Style x:Key="DGCellStyle2" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Right" />
    </Style>
    
    <!-- custom combo box -->

    <!-- Flat ComboBox -->
    <Style TargetType="Border" x:Key="ComboBoxBorderStyle">
        <Setter Property="BorderBrush" Value="#333333"/>
        <Setter Property="Background" Value="WhiteSmoke"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="Background" Value="#333333"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Path" x:Key="PathStyle">
        <Setter Property="Fill" Value="#333333"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Fill" Value="WhiteSmoke"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border"
              CornerRadius="0" BorderThickness="1, 1, 1, 1" 
              Style="{StaticResource ComboBoxBorderStyle}" />
            <Border Grid.Column="1" Margin="1, 1, 1, 1" Name="ButtonBorder"
              CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
              Style="{StaticResource ComboBoxBorderStyle}" />

            <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource PathStyle}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="LightBlue"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                              HorizontalAlignment="Left" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                     MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Margin="0, 1, 0, 0"
                                        CornerRadius="0" BorderThickness="1,1,1,1" 
                                        Style="{StaticResource ComboBoxBorderStyle}"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="TextElement.Foreground" Value="White"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- End of Flat ComboBox -->

    
    <!-- mini widget context menu style  -->
    
    <Style TargetType="ContextMenu" x:Key="miniWidgetContextMenuColor">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="#202020"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Background="#f0f0f0" BorderBrush="DarkGray" BorderThickness="1">
                        <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static res:Settings.Default}, Path = DarkMode}" Value="True">
                <Setter Property="Foreground" Value="#f0f0f0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border Background="#202020" BorderBrush="DarkGray" BorderThickness="1">
                                <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Settings -->

</ResourceDictionary>