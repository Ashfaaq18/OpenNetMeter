name: Build OpenNetMeter msi and push to Single Draft Release

on:
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore .\OpenNetMeter.sln

      - name: Build solution (Release)
        run: dotnet build .\OpenNetMeter.sln --configuration Release --no-restore

      - name: Create or update draft release
        id: draft_release
        uses: actions/create-release@v1
        with:
          tag_name: opennetmeter-draft
          release_name: "OpenNetMeter (Draft Release)"
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # … your Build & Create-Release steps above …

      - name: Find built MSI
        id: find_msi
        shell: pwsh
        run: |
          # Absolute folder where the MSI was output
          $installerFolder = Join-Path $Env:GITHUB_WORKSPACE 'Installer\bin\x64\Release\en-us'
          # Grab the first MSI matching your pattern
          $msi = Get-ChildItem -Path $installerFolder -Filter 'OpenNetMeter-*.msi' | Select-Object -First 1
          if (-not $msi) { throw '❌ No MSI found in Installer/bin/x64/Release/en-us' }

          # Build a relative path (no leading slash) from the repo root
          $relative = "Installer\bin\x64\Release\en-us\$($msi.Name)"

          # Emit for the next step
          "msi_path=$relative" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload MSI to draft release
        uses: actions/upload-release-asset@v1
        with:
          upload_url:   ${{ steps.draft_release.outputs.upload_url }}
          asset_path:   ${{ steps.find_msi.outputs.msi_path }}
          asset_name:   OpenNetMeter-latest.msi
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}